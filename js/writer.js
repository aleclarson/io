// Generated by CoffeeScript 1.12.4
var Null, Promise, Type, fs, type;

Promise = require("Promise");

Type = require("Type");

Null = require("Null");

fs = require("fs");

type = Type("Writer");

type.defineArgs(function() {
  return {
    required: true,
    types: {
      stream: fs.WriteStream,
      encoding: String.or(Null)
    },
    defaults: {
      encoding: "utf-8"
    }
  };
});

type.defineFrozenValues(function(options) {
  return {
    _stream: options.stream,
    _encoding: options.encoding
  };
});

type.defineValues(function() {
  return {
    _drained: Promise.defer()
  };
});

type.initInstance(function() {
  if (this._encoding && this._stream.setEncoding) {
    this._stream.setEncoding(this._encoding);
  }
  this._stream.on("error", (function(_this) {
    return function(error) {
      _this._drained.reject(error);
      return _this._drained = Promise.defer();
    };
  })(this));
  return this._stream.on("drain", (function(_this) {
    return function() {
      _this._drained.resolve();
      return _this._drained = Promise.defer();
    };
  })(this));
});

type.defineMethods({
  write: function(newValue) {
    if (!(this._stream.writeable || this._stream.writable)) {
      throw Error("Can't write to non-writable (possibly closed) stream!");
    }
    if (this._stream.write(newValue)) {
      return Promise();
    }
    return this._drained.promise;
  },
  flush: function() {
    return this._drained.promise;
  },
  close: function() {
    var finished;
    finished = Promise.defer();
    this._stream.on("finish", finished.resolve);
    this._stream.on("error", finished.reject);
    this._stream.end();
    this._drained.resolve();
    return finished.promise;
  },
  destroy: function() {
    this._stream.destroy();
    this._drained.resolve();
  }
});

module.exports = type.build();
